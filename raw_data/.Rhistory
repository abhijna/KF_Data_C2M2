group_by(Genotype) %>%
summarize(avg = mean(na.omit(norm_last3)),
stdev = sd(na.omit(norm_last3)),
sem = sd(na.omit(norm_last3)/sqrt(length(norm_last3))))
ggplot(data=norm_dat1, aes(x=Genotype, y = avg, color = Genotype, group = Genotype, fill = Genotype)) +
geom_bar(mapping = aes(x = Genotype, y = avg), stat="identity", position = "dodge") +
geom_errorbar(aes(ymin=avg-sem, ymax=avg+sem),
width=.1, position=position_dodge(0.9), color = "black") +
ggtitle("Ext 1 (individual values normalized to first 3)") +
labs(x="Genotype", y="Fold change from first 3") +
theme(text=element_text(family="sans",size=22),
plot.title=element_text(hjust=c(0.3), size=24)) +
scale_x_discrete(labels = c("KO", "WT"))
ggplot(data=norm_dat1, aes(x=Genotype, y = avg, color = Genotype, group = Genotype, fill = Genotype)) +
geom_bar(mapping = aes(x = Genotype, y = avg), stat="identity", position = "dodge") +
geom_errorbar(aes(ymin=avg-sem, ymax=avg+sem),
width=.1, position=position_dodge(0.9), color = "black") +
ggtitle("Ext 1 - Females (individual values normalized to first 3)") +
labs(x="Genotype", y="Fold change from first 3") +
theme(text=element_text(family="sans",size=22),
plot.title=element_text(hjust=c(0.3), size=24)) +
scale_x_discrete(labels = c("KO", "WT"))
### Script for making Remote Extinction graphs in R ###
## Written by Abhijna Parigi for Maribel's data on June 23 2019
require(nlme)
require(lme4)
require(tidyverse)
require(car)
require(effects)
library(ggplot2)
library(plotly)
library(lsmeans)
library(simr)
setwd('/Volumes/files/Shared/DATA/Behavior/Maribel/Munc_MasterSpreadsheets/Abhijna/CSV_For_R/')
## Import data ##
ext1 <- read.csv("Remote.csv", header = T)
## Tidying data ##
ext1_transformed <- gather(ext1, key = "Tone", value = "Freezing_Time", 4:ncol(ext1))
tail(ext1_transformed)
ext1_transformed <- filter(ext1_transformed, sex == "M")
### Script for making Remote Extinction graphs in R ###
## Written by Abhijna Parigi for Maribel's data on June 23 2019
require(nlme)
require(lme4)
require(tidyverse)
require(car)
require(effects)
library(ggplot2)
library(plotly)
library(lsmeans)
library(simr)
setwd(
'/Volumes/files/Shared/DATA/Behavior/Maribel/Munc_MasterSpreadsheets/Abhijna/CSV_For_R/'
)
## Import data ##
ext1 <- read.csv("Remote.csv", header = T)
## Tidying data ##
ext1_transformed <-
gather(ext1, key = "Tone", value = "Freezing_Time", 4:ncol(ext1))
tail(ext1_transformed)
ext1_transformed <- filter(ext1_transformed, sex == "M")
## Subsetting the first and last three tones
first3 <- ext1_transformed %>%
filter(Tone == "Tone01" | Tone == "Tone02" | Tone == "Tone03") %>%
group_by(Genotype, ID) %>%
summarize(first3 = mean(na.omit(Freezing_Time)))
last3 <- ext1_transformed %>%
filter(Tone == "Tone18" | Tone == "Tone19" | Tone == "Tone20") %>%
group_by(Genotype, ID) %>%
summarize(last3 = mean(na.omit(Freezing_Time)))
first3 <- data.frame(first3)
last3 <- data.frame(last3)
baseline <- filter(ext1_transformed, Tone == "Baseline")
baseline$Tone <- NULL
baseline$baseline <- baseline$Freezing_Time
baseline$Freezing_Time <- NULL
baseline$sex <- NULL
firstvslast <- merge(first3, last3)
firstvslast <- merge(firstvslast, baseline)
firstvslast <- gather(firstvslast, key = "Bin", value = "Freezing_Time", 3:5)
firstvslast1 <- firstvslast %>%
group_by(Genotype, Bin) %>%
summarize(avg = mean(na.omit(Freezing_Time)))
# stdev = sd(na.omit(Freezing_Time)),
# sem = sd(na.omit(Freezing_Time)/sqrt(length(Freezing_Time))))
dat <- left_join(firstvslast, firstvslast1)
#### Standardize to its own baseline ####
head(firstvslast)
wide_dat <- spread(firstvslast, key = Bin, value = Freezing_Time)
head(wide_dat)
norm_dat <- wide_dat %>%
mutate(norm_first3 = first3/first3) %>%
mutate(norm_last3 = last3/first3)
norm_dat1 <- norm_dat %>%
group_by(Genotype) %>%
summarize(avg = mean(na.omit(norm_last3)),
stdev = sd(na.omit(norm_last3)),
sem = sd(na.omit(norm_last3)/sqrt(length(norm_last3))))
ggplot(data=norm_dat1, aes(x=Genotype, y = avg, color = Genotype, group = Genotype, fill = Genotype)) +
geom_bar(mapping = aes(x = Genotype, y = avg), stat="identity", position = "dodge") +
geom_errorbar(aes(ymin=avg-sem, ymax=avg+sem),
width=.1, position=position_dodge(0.9), color = "black") +
ggtitle("Ext 1 - Females (individual values normalized to first 3)") +
labs(x="Genotype", y="Fold change from first 3") +
theme(text=element_text(family="sans",size=22),
plot.title=element_text(hjust=c(0.3), size=24)) +
scale_x_discrete(labels = c("KO", "WT"))
ggplot(data=norm_dat1, aes(x=Genotype, y = avg, color = Genotype, group = Genotype, fill = Genotype)) +
geom_bar(mapping = aes(x = Genotype, y = avg), stat="identity", position = "dodge") +
geom_errorbar(aes(ymin=avg-sem, ymax=avg+sem),
width=.1, position=position_dodge(0.9), color = "black") +
ggtitle("Ext 1 - Males (individual values normalized to first 3)") +
labs(x="Genotype", y="Fold change from first 3") +
theme(text=element_text(family="sans",size=22),
plot.title=element_text(hjust=c(0.3), size=24)) +
scale_x_discrete(labels = c("KO", "WT"))
## Importing KF data ##
kf <- read.table(data = "/Users/abhijnaparigi/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv", header = TRUE)
## Importing KF data ##
kf <- read.table(data = "/Users/abhijnaparigi/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv", sep = '\t', header = TRUE)
## Importing KF data ##
kf <- read.table(data = "~/Users/abhijnaparigi/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv", sep = '\t', header = TRUE)
## Importing KF data ##
kf <- read.table(data = "~/Users/abhijnaparigi/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv", sep = '\t')
read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
thing <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
## Importing KF data ##
kf <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
head(kf)
str(kf)
str(kf)
nrow(kf)
ncol(kf)
## Importing packages here ##
require(tidyverse)
colnames(kf)
kf_subject <- kf %>%
select(Participants.ID)
kf_subject
head(kf$subject)
head(kf_subject)
colnames(kf)
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.
kf_subject <- kf %>%
select(Participants.ID, Participant.External.ID, Study.Name,persistent_id,creation_time,Tissue.Type)
kf$creation_time <- rep(NA, nrow(kf))
kf$persistent_id <- rep(NA, nrow(kf))
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.
kf_subject <- kf %>%
select(Participants.ID, Participant.External.ID, Study.Name,persistent_id,creation_time,Tissue.Type)
colnames(kf_subject)
write.csv(kf_subject, "~/Desktop/Brown_Lab/Kids_First_data/Subject")
write.csv(kf_subject, "~/Desktop/Brown_Lab/Kids_First_data/Subject.csv")
nrow(kf_subject)
write.table(kf_subject, file = "~/Desktop/Brown_Lab/Kids_First_data/Subject.csv", row.names=FALSE, sep="\t")
write.table(kf_subject, file = "~/Desktop/Brown_Lab/Kids_First_data/Subject.tsv", row.names=FALSE, sep="\t")
kf$id_namespace <- rep(NA, nrow(kf))
colnames(kf_subject)
colnames(kf)
kf2 <- read.table(file = '~/Desktop/Brown_Lab/kidsfirst-participant-family-manifest_2020-06-03', sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/kidsfirst-participant-family-manifest_2020-06-03", sep = '\t', header = TRUE)
## Importing KF data ##
kf <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
str(kf)
ncol(kf)
kf$creation_time <- rep(NA, nrow(kf))
kf$persistent_id <- rep(NA, nrow(kf))
kf$id_namespace <- rep(NA, nrow(kf))
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.
colnames(kf)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, )
kf$anatomy <- rep(NA, nrow(kf))
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, anatomy)
colnames(kf_subject)
kf$creation_time <- rep(NA, nrow(kf))
kf$persistent_id <- rep(NA, nrow(kf))
kf$id_namespace <- rep(NA, nrow(kf))
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.
kf$anatomy <- rep(NA, nrow(kf))
colnames(kf)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, anatomy)
colnames(kf_subject)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, anatomy)
colnames(kf_subject)
colnames(kf_biosample)
write.table(kf_subject, file = "~/Desktop/Brown_Lab/Kids_First_data/Biosample.tsv", row.names=FALSE, sep="\t")
write.table(kf_biosample, file = "~/Desktop/Brown_Lab/Kids_First_data/Biosample.tsv", row.names=FALSE, sep="\t")
nrow(kf_biosample)
nrow(kf_subject)
colnames(kf)
## File
kf_file <- kf %>%
select(id_namespace,File.ID, File.External.ID, Study.Name, persistent_id, creation_time, File.Size, sha256, md5, File.Name, File.Format, Data.Type)
kf$sha256 <- rep(NA, nrow(kf))
kf$md5 <- rep(NA, nrow(kf))
## File
kf_file <- kf %>%
select(id_namespace,File.ID, File.External.ID, Study.Name, persistent_id, creation_time, File.Size, sha256, md5, File.Name, File.Format, Data.Type)
colnames(kf_file)
write.table(kf_file, file = "~/Desktop/Brown_Lab/Kids_First_data/File.tsv", row.names=FALSE, sep="\t")
colnames(kf)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
colnames(kf2)
nrow(kf2)
nrow(kf)
colnames(kf)
colnames(kf2)
colnames(kf)
nrow(kf)
colnames(kf2)
## Importing packages here ##
require(tidyverse)
## Importing KF data ##
kf <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
str(kf)
## Importing KF data ##
kf <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
str(kf)
ncol(kf)
kf$creation_time <- rep(NA, nrow(kf))
kf$persistent_id <- rep(NA, nrow(kf))
kf$id_namespace <- rep(NA, nrow(kf))
kf$sha256 <- rep(NA, nrow(kf))
kf$md5 <- rep(NA, nrow(kf))
kf$anatomy <- rep(NA, nrow(kf))
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.
colnames(kf)
## Suject
kf_subject <- kf %>%
select(id_namespace, Participants.ID, Participant.External.ID, Study.Name,persistent_id,creation_time,Tissue.Type)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
## Importing KF data ##
kf <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
colnames(kf2)
colnames(kf)
kf2_biosample <- kf2 %>%
select(Experiment.Strategy, File.ID)
## Importing KF data ##
kf1 <- read.table(file = '~/Desktop/Brown_Lab/Kids_First_data/kf_data.tsv', sep = '\t', header = TRUE)
kf2 <- read.table(file = "~/Desktop/Brown_Lab/Kids_First_data/kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf2_biosample <- kf2 %>%
select(Experiment.Strategy, File.ID)
kf <- left_join(kf1, kf2)
kf2_biosample
colnames(kf2_biosample)
colnames(kf1)
colnames(kf2_biosample)
colnames(kf)
nrow(kf)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, anatomy)
## I'm going to make some empty column names for easy pasting in to master spreadsheet
kf$creation_time <- rep(NA, nrow(kf))
kf$persistent_id <- rep(NA, nrow(kf))
kf$id_namespace <- rep(NA, nrow(kf))
kf$sha256 <- rep(NA, nrow(kf))
kf$md5 <- rep(NA, nrow(kf))
kf$anatomy <- rep(NA, nrow(kf))
kf$Tissue.Type <- kf$Tissue.Type..Source.Text.#marisa's dataset doesn't have a tissue type column
## This needs a tissue type column!
kf_subject <- kf %>%
select(id_namespace, Participants.ID, Participant.External.ID, Study.Name,persistent_id,creation_time,Tissue.Type)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Tissue.Type, anatomy)
## Biosample
kf_biosample <- kf %>%
select(id_namespace,Biospecimen.ID, Study.ID, Study.Name, File.ID, creation_time, Experiment.Strategy, anatomy)
colnames(kf_biosample)
write.table(kf_biosample, file = "~/Desktop/Brown_Lab/Kids_First_data/Biosample.tsv", row.names=FALSE, sep="\t")
## File
kf_file <- kf %>%
select(id_namespace,File.ID, File.External.ID, Study.Name, persistent_id, creation_time, File.Size, sha256, md5, File.Name, File.Format, Data.Type)
colnames(kf_file)
write.table(kf_file, file = "~/Desktop/Brown_Lab/Kids_First_data/File.tsv", row.names=FALSE, sep="\t")
kf_collection <- kf %>%
select(id_namespace,File.ID,persistent_id,creation_time,Study.Name,Study.Long.Name,)
kf$name <- rep(NA, nrow(kf))
kf$description <- rep(NA, nrow(kf))
kf_collection <- kf %>%
select(id_namespace,File.ID,persistent_id,creation_time,Study.Name,name,description)
colnames(kf)
colnames(kf_collection)
write.table(kf_collection, file = "~/Desktop/Brown_Lab/Kids_First_data/Collection.tsv", row.names=FALSE, sep="\t")
library(dplyr)
pheno <- read.table(file = "/Users/abhijnaparigi/Desktop/test/file-table.tsv", sep = '\t', header = TRUE)
pheno$Biospecimen.ID <- as.character(pheno$Biospecimen.ID)
pheno$Participants.ID <- as.character(pheno$Participants.ID)
pheno$Tissue.Type..Source.Text. <- as.character(pheno$Tissue.Type..Source.Text.)
str(pheno)
pheno_split_1 <- cSplit(pheno, "Biospecimen.ID", ",")
library(stringr)
pheno_split_1 <- cSplit(pheno, "Biospecimen.ID", ",")
library(splitstackshape)
pheno <- read.table(file = "/Users/abhijnaparigi/Desktop/test/file-table.tsv", sep = '\t', header = TRUE)
pheno$Biospecimen.ID <- as.character(pheno$Biospecimen.ID)
pheno$Participants.ID <- as.character(pheno$Participants.ID)
pheno$Tissue.Type..Source.Text. <- as.character(pheno$Tissue.Type..Source.Text.)
str(pheno)
pheno_split_1 <- cSplit(pheno, "Biospecimen.ID", ",")
pheno_split_2 <- cSplit(pheno_split_1, "Tissue.Type..Source.Text.", ",")
head(pheno_split_2)
pheno_1  <-  pheno_split_2 %>%
select(-Biospecimen.ID_2, -Tissue.Type..Source.Text._2) %>%
rename(Biospecimen.ID = Biospecimen.ID_1) %>%
rename(Tissue.Type = Tissue.Type..Source.Text._1)
pheno_2  <-  pheno_split_2 %>%
select(-Biospecimen.ID_1, -Tissue.Type..Source.Text._1) %>%
rename(Biospecimen.ID = Biospecimen.ID_2) %>%
rename(Tissue.Type = Tissue.Type..Source.Text._2)
pheno <- rbind(pheno_1, pheno_2)
participants <- read.table(file = "/Users/abhijnaparigi/Desktop/test/kidsfirst-participant-family-manifest_2020-07-28.tsv", sep = '\t', header = TRUE)
head(participants)
nrow(participants)
pheno_file <- biospecimen_added %>%
mutate(Biospecimen.ID_Again = Biospecimen.ID) %>%
select(Biospecimen.ID, Biospecimen.ID_Again, Tissue.Type)
biospecimen_added <- inner_join(x=participants, y=pheno)
pheno <- read.table(file = "/Users/abhijnaparigi/Desktop/test/file-table.tsv", sep = '\t', header = TRUE)
pheno$Biospecimen.ID <- as.character(pheno$Biospecimen.ID)
pheno
install.packages("httr")
install.packages("jsonlite")
L1000FWD_URL <- 'http://amp.pharm.mssm.edu/L1000FWD/'
sig_id <- 'CPC006_HA1E_24H:BRD-A70155556-001-04-4:40'
response <- GET(paste0(L1000FWD_URL, 'sig/', sig_id))
install.packages("GET")
response <- GET(paste0(L1000FWD_URL, 'sig/', sig_id))
head(sig_id)
head(sig_id.5)
head(sig_id,5)
sig_id
response <- GET(paste0(L1000FWD_URL, 'sig/', sig_id))
response <- get(paste0(L1000FWD_URL, 'sig/', sig_id))
install.packages("cmapR")
clear
ls
ls
require(cmapR)
install.packages("cmapR")
## Kids First and C2M2
---------------------------------------------------------------------------------------------------------------------------------------------------------
## This script was written by Abhijna Parigi on 06/05/2020 to make KF data tables (file.tsv, biosample.tsv, project.tsv and subject.tsv) for C2M2 input
## Some pre-processing: There are a few columns in the KF dataset that need to be changed. You will need to make these changes to the main datasets.
## These columns are: File.Format, Data.type Anatomy. I've changed Experiment.Strategy programmatically.
## Refer to this GitHub issue to figure out what values go in there: https://github.com/dib-lab/cfde/issues/61
## NO POST-PROCESSING REQUIRED!
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Importing packages here
library(scales)
library(dplyr)
library(tidyverse)
library(splitstackshape)
library(stringr)
#### Importing KF data ####
## The required columns are spread across a couple of different datset, so import them all,
## select columns you need and merge into on dataset
## I don't use kf3 for anything, but it's there now and I don't want to change all the variable names.
setwd("/Users/abhijnaparigi/Desktop/GitHub/KF_Data_C2M2/raw_data")
kf1 <- read.table(file = 'kf_data.tsv', sep = '\t', header = TRUE)
kf2 <- read.table(file = "kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf3 <- read.table(file = "participant_clinical_20200608.tsv", sep = '\t', header = TRUE, fill = TRUE)
kf4 <- read.table(file = "participants_biospecimen_20200608.tsv", sep = '\t', header = TRUE)
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf1$Participants.ID <- as.character(kf1$Participants.ID)
kf1$Study.ID <- as.character(kf1$Study.ID)
kf1$File.Name <- as.character(kf1$File.Name)
kf1$File.Format <- as.character(kf1$File.Format)
kf1$Data.Type <- as.character(kf1$Data.Type)
kf1$Study.Name <- as.character(kf1$Study.Name)
kf2$Experiment.Strategy <- as.character(kf2$Experiment.Strategy)
kf2_biosample <- kf2 %>%
select(Experiment.Strategy, File.ID)
kf <- left_join(kf1, kf2_biosample)
## Check to see if everything looks ok:
str(kf)
nrow(kf)
nrow(kf2)
kf$creation_time <- rep("", nrow(kf))
kf$persistent_id <- rep("", nrow(kf))
kf$sha256 <- rep("", nrow(kf))
kf$md5 <- rep("", nrow(kf))
kf$description <- rep("", nrow(kf))
kf$abbreviation <- rep("",nrow(kf))
kf$project_id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$granularity <- rep("cfde_subject_granularity:0", nrow(kf))
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf$Participants.ID <- as.character(kf$Participants.ID)
kf$Study.ID <- as.character(kf$Study.ID)
kf$Experiment.Strategy <- as.character(kf$Experiment.Strategy)
kf$File.Name <- as.character(kf$File.Name)
kf$File.ID <- as.character(kf$File.ID)
kf$File.Format <- as.character(kf$File.Format)
kf$Data.Type <- as.character(kf$Data.Type)
kf$Study.Name <- as.character(kf$Study.Name)
kf <- kf %>%
mutate_all(~ifelse(.=="--", NA, .)) %>%
mutate(Study.ID = substr(Study.ID,1,11)) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WGS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WXS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", RNA-Seq")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", Not Reported"))
kf <- cSplit(kf, "Biospecimen.ID", ",")
kf <- cSplit(kf, "Study.Name", ",")
kf <- cSplit(kf, "Participants.ID") ## This is column that needs to be "gathered" because we care about all the values in each cell
head(kf)
kf2 <- kf %>%
gather("ColID", "Participants.ID", c("Participants.ID_1","Participants.ID_2","Participants.ID_3",
"Participants.ID_4","Participants.ID_5"),
-(File.ID:Study.Name_5)) %>%
select(-ColID) ## take out this line if you want to see where the id came from.
##make subject_role_taxonomy.tsv
#subject_id_namespace    subject_id                         role_id                taxonomy_id
#cfde_id_namespace:3    [fill this with participant ID]    cfde_subject_role:3     NCBI:txid9606
uniq_participants <- unique(kf2$Participants.ID)
length(uniq_participants)
subroletax_df <- data.frame('subject_id_namespace'='cfde_id_namespace:3',
'subject_id'=uniq_participants,
'role_id'='cfde_subject_role:3',
'taxonomy_id'='NCBI:txid9606')
dim(subroletax_df)
head(subroletax_df)
write.table(subroletax_df, file='~/Desktop/subject_role_taxonomy.tsv', sep='\t', row.names=F, quote=F)
write.csv(kf, "~/Desktop/kf.csv")
biosample1 <- test_kf %>%
select(id_namespace, Biospecimen.ID_1, project_id_namespace, Study.ID, persistent_id,
creation_time, Experiment.Strategy) %>%
distinct()
test_kf <- kf2 # kf[1:100,]
head(test_kf)
biosample1 <- test_kf %>%
select(id_namespace, Biospecimen.ID_1, project_id_namespace, Study.ID, persistent_id,
creation_time, Experiment.Strategy) %>%
distinct()
kf4$Biospecimens.Id <- as.character(kf4$Biospecimens.Id)
kf4$Composition <- as.character(kf4$Composition)
anatomy_col <- kf4 %>%
mutate_all(~ifelse(.=="--", NA, .)) %>%
select(Biospecimens.Id, Composition)
anatomy_col <- rename(anatomy_col, Biospecimen.ID_1 = Biospecimens.Id)
## Must convert back to factor or character to join
biosample1$Biospecimen.ID_1 <- as.factor(biosample1$Biospecimen.ID_1)
biosample2 <- left_join(biosample1, anatomy_col)
biosample <- biosample2 %>%
rename(id = Biospecimen.ID_1,
project = Study.ID,
assay_type = Experiment.Strategy,
anatomy = Composition) %>%
distinct()
## Now change these out with ids from here:
unique(biosample$assay_type)
## R does not like parantheses inside a string.
## So this code takes out everything that's inside parantheses inside a string of assay type
## It fixes Linked-Read WGS problem.
biosample$assay_type <- str_replace(biosample$assay_type, " \\(.*\\)", "")
biosample$assay_type <- as.character(biosample$assay_type)
biosample <- biosample %>%
mutate_if(is.character,
str_replace_all, pattern = "WXS", replacement = "OBI:0002118") %>%
mutate_if(is.character,
str_replace_all, pattern = "miRNA-Seq", replacement = "OBI:0001271") %>%
mutate_if(is.character,
str_replace_all, pattern = "RNA-Seq", replacement = "OBI:0001271") %>%
mutate_if(is.character,
str_replace_all, pattern = "Not Reported", replacement = "") %>%
mutate_if(is.character,
str_replace_all, pattern = "Linked-Read WGS", replacement = "OBI:0002117") %>%
mutate_if(is.character,
str_replace_all, pattern = "WGS", replacement = "OBI:0002117")
# Sanity check
nrow(biosample)==length(unique(biosample$id)) ## FAILED! By about 100 rows. Probably due to unique combinations.
## Take out empty rows in id, project, assay type column
biosample <- biosample %>%
drop_na(id) %>%
drop_na(project) %>%
distinct()
df_nodups <- biosample[!duplicated(biosample$id),]
dim(df_nodups) #17088
length(unique(df_nodups$id)) #17088
df_nodups[df_nodups$id == 'BS_01BDZ0TW',] #only 1 entry now
biosample <- df_nodups
#Sanity check
nrow(biosample)==length(unique(biosample$id)) ## FAILED! By about 100 rows. Probably due to unique combinations.
## Change everything back to factor. If you don't there are "" around everything. And this breaks the model. Sigh
biosample <- as.data.frame(unclass(biosample))
## write the table
## Gotta take out parantheses from here: OBI:0002117 (). I can't figure out how to make R do it!
write.table(biosample, file = "~/Desktop/biosample.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
thing <- read.table(file = "~/Desktop/biosample.tsv", sep = '\t', header = TRUE)
head(thing)
str(thing)
thing$id <- as.character(thing$id)
thing$project <- as.character(thing$project)
head(thing)
length(thing$id)
length(unique(thing$id))
