mutate(Study.ID = substr(Study.ID,1,11)) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WGS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WXS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", RNA-Seq")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", Not Reported"))
kf <- cSplit(kf, "Biospecimen.ID", ",")
kf <- cSplit(kf, "Study.Name", ",")
kf <- cSplit(kf, "Participants.ID") ## This is column that needs to be "gathered" because we care about all the values in each cell
head(kf)
kf2 <- kf %>%
gather("ColID", "Participants.ID", c("Participants.ID_1","Participants.ID_2","Participants.ID_3",
"Participants.ID_4","Participants.ID_5"),
-(File.ID:Study.Name_5)) %>%
select(-ColID) ## take out this line if you want to see where the id came from.
##make subject_role_taxonomy.tsv
#subject_id_namespace    subject_id                         role_id                taxonomy_id
#cfde_id_namespace:3    [fill this with participant ID]    cfde_subject_role:3     NCBI:txid9606
uniq_participants <- unique(kf2$Participants.ID)
length(uniq_participants)
subroletax_df <- data.frame('subject_id_namespace'='cfde_id_namespace:3',
'subject_id'=uniq_participants,
'role_id'='cfde_subject_role:3',
'taxonomy_id'='NCBI:txid9606')
dim(subroletax_df)
head(subroletax_df)
write.table(subroletax_df, file='~/Desktop/subject_role_taxonomy.tsv', sep='\t', row.names=F, quote=F)
test_kf <- kf2 # kf[1:100,]
head(test_kf)
file_kf <- test_kf %>%
select(id_namespace, File.ID, project_id_namespace, Study.ID, persistent_id,
creation_time, File.Size, sha256, md5, File.Name, File.Format, Data.Type) %>%
rename (id = File.ID,
project = Study.ID,
size_in_bytes  = File.Size,
filename = File.Name,
file_format = File.Format,
data_type = Data.Type) %>%
distinct()
## Check to make sure file format and data type make sense
unique(file_kf$data_type)
unique(file_kf$file_format) # They do!
file_kf <- file_kf %>%
drop_na(id) %>%
drop_na(project)
file_kf <- as.data.frame(unclass(file_kf))
write.table(file_kf, file = "~/Desktop/file.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
## Kids First and C2M2
---------------------------------------------------------------------------------------------------------------------------------------------------------
## This script was written by Abhijna Parigi on 06/05/2020 to make KF data tables (file.tsv, biosample.tsv, project.tsv and subject.tsv) for C2M2 input
## Some pre-processing: There are a few columns in the KF dataset that need to be changed. You will need to make these changes to the main datasets.
## These columns are: File.Format, Data.type Anatomy. I've changed Experiment.Strategy programmatically.
## Refer to this GitHub issue to figure out what values go in there: https://github.com/dib-lab/cfde/issues/61
## NO POST-PROCESSING REQUIRED!
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Importing packages here
library(tidyverse)
library(splitstackshape)
library(stringr)
#### Importing KF data ####
## The required columns are spread across a couple of different datset, so import them all,
## select columns you need and merge into on dataset
## I don't use kf3 for anything, but it's there now and I don't want to change all the variable names.
setwd("/Users/abhijnaparigi/Desktop/GitHub/KF_Data_C2M2/raw_data")
kf1 <- read.table(file = 'kf_data.tsv', sep = '\t', header = TRUE)
kf2 <- read.table(file = "kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf3 <- read.table(file = "participant_clinical_20200608.tsv", sep = '\t', header = TRUE, fill = TRUE)
kf4 <- read.table(file = "participants_biospecimen_20200608.tsv", sep = '\t', header = TRUE)
## need to change some columns to character strings before we can join and do other data wrangling
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf1$Participants.ID <- as.character(kf1$Participants.ID)
kf1$Study.ID <- as.character(kf1$Study.ID)
kf1$File.Name <- as.character(kf1$File.Name)
kf1$File.Format <- as.character(kf1$File.Format)
kf1$Data.Type <- as.character(kf1$Data.Type)
kf1$Study.Name <- as.character(kf1$Study.Name)
kf2$Experiment.Strategy <- as.character(kf2$Experiment.Strategy)
## I only need the experimental.strategy column from kf2. Then combine the columns I want from the first two datasets
kf2_biosample <- kf2 %>%
select(Experiment.Strategy, File.ID)
kf <- left_join(kf1, kf2_biosample)
## Check to see if everything looks ok:
str(kf)
nrow(kf)
nrow(kf2)
## Make some empty column names. These need to be in there but don't necessarily need to be populated.
kf$creation_time <- rep("", nrow(kf))
kf$persistent_id <- rep("", nrow(kf))
kf$sha256 <- rep("", nrow(kf))
kf$md5 <- rep("", nrow(kf))
kf$description <- rep("", nrow(kf))
kf$abbreviation <- rep("",nrow(kf))
## This value is the same for every cell of it's column.
kf$project_id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$granularity <- rep("cfde_subject_granularity:0", nrow(kf))
## Take out all the missing data that looks like this "--"
## There are some repeated rows in the column called Study.ID and experimental strategy
## but they are labelled differently. Ex. WGS, WGS. So I'm changing those to say it only once.
## Remember to change factors to characters or the conversion will get wonky.
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf$Participants.ID <- as.character(kf$Participants.ID)
kf$Study.ID <- as.character(kf$Study.ID)
kf$Experiment.Strategy <- as.character(kf$Experiment.Strategy)
kf$File.Name <- as.character(kf$File.Name)
kf$File.ID <- as.character(kf$File.ID)
kf$File.Format <- as.character(kf$File.Format)
kf$Data.Type <- as.character(kf$Data.Type)
kf$Study.Name <- as.character(kf$Study.Name)
kf <- kf %>%
mutate_all(~ifelse(.=="--", NA, .)) %>%
mutate(Study.ID = substr(Study.ID,1,11)) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WGS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WXS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", RNA-Seq")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", Not Reported"))
## It's a bit harder to get rid of the extra biospecimen ids in a single cell, so this is a really crappy way of doing it.
## some are repeats and some are not, but we're going to keep the first one for now. i.e Biospecimen.ID_1. See in Biospample section below.
kf <- cSplit(kf, "Biospecimen.ID", ",")
kf <- cSplit(kf, "Study.Name", ",")
kf <- cSplit(kf, "Participants.ID") ## This is column that needs to be "gathered" because we care about all the values in each cell
head(kf)
## Gathering all the participant ids to make a long format.
## I'm not sure why some have 5 participant IDs! But let's not worry about that right now.
kf2 <- kf %>%
gather("ColID", "Participants.ID", c("Participants.ID_1","Participants.ID_2","Participants.ID_3",
"Participants.ID_4","Participants.ID_5"),
-(File.ID:Study.Name_5)) %>%
select(-ColID) ## take out this line if you want to see where the id came from.
##make subject_role_taxonomy.tsv
#subject_id_namespace    subject_id                         role_id                taxonomy_id
#cfde_id_namespace:3    [fill this with participant ID]    cfde_subject_role:3     NCBI:txid9606
uniq_participants <- unique(kf2$Participants.ID)
length(uniq_participants)
subroletax_df <- data.frame('subject_id_namespace'='cfde_id_namespace:3',
'subject_id'=uniq_participants,
'role_id'='cfde_subject_role:3',
'taxonomy_id'='NCBI:txid9606')
dim(subroletax_df)
head(subroletax_df)
write.table(subroletax_df, file='~/Desktop/subject_role_taxonomy.tsv', sep='\t', row.names=F, quote=F)
## change this part if you wish to select only first 100 for testing script
test_kf <- kf2 # kf[1:100,]
head(test_kf)
#### file.tsv ####
file_kf <- test_kf %>%
select(id_namespace, File.ID, project_id_namespace, Study.ID, persistent_id,
creation_time, File.Size, sha256, md5, File.Name, File.Format, Data.Type) %>%
rename (id = File.ID,
project = Study.ID,
size_in_bytes  = File.Size,
filename = File.Name,
file_format = File.Format,
data_type = Data.Type) %>%
distinct()
## Check to make sure file format and data type make sense
unique(file_kf$data_type)
unique(file_kf$file_format) # They do!
file_kf <- file_kf %>%
drop_na(id) %>%
drop_na(project)
file_kf <- as.data.frame(unclass(file_kf))
write.table(file_kf, file = "~/Desktop/file.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
#### biosample.tsv ####
biosample1 <- test_kf %>%
select(id_namespace, Biospecimen.ID_1, project_id_namespace, Study.ID, persistent_id,
creation_time, Experiment.Strategy) %>%
distinct()
## Bringing in info from kf4 now. Remember to change everything to character first
kf4$Biospecimens.Id <- as.character(kf4$Biospecimens.Id)
kf4$Composition <- as.character(kf4$Composition)
anatomy_col <- kf4 %>%
mutate_all(~ifelse(.=="--", NA, .)) %>%
select(Biospecimens.Id, Composition)
anatomy_col <- rename(anatomy_col, Biospecimen.ID_1 = Biospecimens.Id)
## Must convert back to factor or character to join
biosample1$Biospecimen.ID_1 <- as.factor(biosample1$Biospecimen.ID_1)
biosample2 <- left_join(biosample1, anatomy_col)
biosample <- biosample2 %>%
rename(id = Biospecimen.ID_1,
project = Study.ID,
assay_type = Experiment.Strategy,
anatomy = Composition) %>%
distinct()
## Now change these out with ids from here:
unique(biosample$assay_type)
## R does not like parantheses inside a string.
## So this code takes out everything that's inside parantheses inside a string of assay type
## It fixes Linked-Read WGS problem.
biosample$assay_type <- str_replace(biosample$assay_type, " \\(.*\\)", "")
biosample$assay_type <- as.character(biosample$assay_type)
biosample <- biosample %>%
mutate_if(is.character,
str_replace_all, pattern = "WXS", replacement = "OBI:0002118") %>%
mutate_if(is.character,
str_replace_all, pattern = "miRNA-Seq", replacement = "OBI:0001271") %>%
mutate_if(is.character,
str_replace_all, pattern = "RNA-Seq", replacement = "OBI:0001271") %>%
mutate_if(is.character,
str_replace_all, pattern = "Not Reported", replacement = "") %>%
mutate_if(is.character,
str_replace_all, pattern = "Linked-Read WGS", replacement = "OBI:0002117") %>%
mutate_if(is.character,
str_replace_all, pattern = "WGS", replacement = "OBI:0002117")
# Sanity check
nrow(biosample)==length(unique(biosample$id)) ## FAILED! By about 100 rows. Probably due to unique combinations.
## Take out empty rows in id, project, assay type column
biosample <- biosample %>%
drop_na(id) %>%
drop_na(project) %>%
distinct()
## This code was written by Marisa Lim to fix duplicate rows!
df_nodups <- biosample[!duplicated(biosample$id),]
dim(df_nodups) #17088
length(unique(df_nodups$id)) #17088
df_nodups[df_nodups$id == 'BS_01BDZ0TW',] #only 1 entry now
biosample <- df_nodups
#Sanity check
nrow(biosample)==length(unique(biosample$id)) ## FAILED! By about 100 rows. Probably due to unique combinations.
## Change everything back to factor. If you don't there are "" around everything. And this breaks the model. Sigh
biosample <- as.data.frame(unclass(biosample))
## write the table
## Gotta take out parantheses from here: OBI:0002117 (). I can't figure out how to make R do it!
write.table(biosample, file = "~/Desktop/biosample.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
#### subject.tsv ####
subject <- test_kf %>%
select(id_namespace, Participants.ID, project_id_namespace, Study.ID, persistent_id, creation_time, granularity) %>%
distinct() %>%
rename (id = Participants.ID,
project = Study.ID)
subject <- drop_na(subject, id)
# Sanity check
nrow(subject) == length(unique(subject$id))
subject <- as.data.frame(unclass(subject))
write.table(subject, file = "~/Desktop/subject.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
#### project.tsv ####
project <- test_kf %>%
select(id_namespace, Study.ID, persistent_id, creation_time, abbreviation, Study.Name_1, description) %>%
distinct() %>%
rename (id = Study.ID,
name = Study.Name_1)
# Sanity check
nrow(project) == length(unique(project$id))
project <- na.omit(project)
project <- as.data.frame(unclass(project))
write.table(project, file = "~/Desktop/project.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
head(kf)
## Kids First and C2M2
---------------------------------------------------------------------------------------------------------------------------------------------------------
## This script was written by Abhijna Parigi on 06/05/2020 to make KF data tables (file.tsv, biosample.tsv, project.tsv and subject.tsv) for C2M2 input
## Some pre-processing: There are a few columns in the KF dataset that need to be changed. You will need to make these changes to the main datasets.
## These columns are: File.Format, Data.type Anatomy. I've changed Experiment.Strategy programmatically.
## Refer to this GitHub issue to figure out what values go in there: https://github.com/dib-lab/cfde/issues/61
## NO POST-PROCESSING REQUIRED!
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Importing packages here
library(tidyverse)
library(splitstackshape)
library(stringr)
#### Importing KF data ####
## The required columns are spread across a couple of different datset, so import them all,
## select columns you need and merge into on dataset
## I don't use kf3 for anything, but it's there now and I don't want to change all the variable names.
setwd("/Users/abhijnaparigi/Desktop/GitHub/KF_Data_C2M2/raw_data")
kf1 <- read.table(file = 'kf_data.tsv', sep = '\t', header = TRUE)
kf2 <- read.table(file = "kidsfirst-participant-family-manifest_2020-06-03.tsv", sep = '\t', header = TRUE)
kf3 <- read.table(file = "participant_clinical_20200608.tsv", sep = '\t', header = TRUE, fill = TRUE)
kf4 <- read.table(file = "participants_biospecimen_20200608.tsv", sep = '\t', header = TRUE)
## need to change some columns to character strings before we can join and do other data wrangling
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf1$Participants.ID <- as.character(kf1$Participants.ID)
kf1$Study.ID <- as.character(kf1$Study.ID)
kf1$File.Name <- as.character(kf1$File.Name)
kf1$File.Format <- as.character(kf1$File.Format)
kf1$Data.Type <- as.character(kf1$Data.Type)
kf1$Study.Name <- as.character(kf1$Study.Name)
kf2$Experiment.Strategy <- as.character(kf2$Experiment.Strategy)
## I only need the experimental.strategy column from kf2. Then combine the columns I want from the first two datasets
kf2_biosample <- kf2 %>%
select(Experiment.Strategy, File.ID)
kf <- left_join(kf1, kf2_biosample)
## Check to see if everything looks ok:
str(kf)
nrow(kf)
nrow(kf2)
## Make some empty column names. These need to be in there but don't necessarily need to be populated.
kf$creation_time <- rep("", nrow(kf))
kf$persistent_id <- rep("", nrow(kf))
kf$sha256 <- rep("", nrow(kf))
kf$md5 <- rep("", nrow(kf))
kf$description <- rep("", nrow(kf))
kf$abbreviation <- rep("",nrow(kf))
kf$file_id_namespace <- rep("",nrow(kf))
kf$biosample_id_namespace <- rep("",nrow(kf))
## This value is the same for every cell of it's column.
kf$project_id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$id_namespace <- rep("cfde_id_namespace:3", nrow(kf))
kf$granularity <- rep("cfde_subject_granularity:0", nrow(kf))
## Take out all the missing data that looks like this "--"
## There are some repeated rows in the column called Study.ID and experimental strategy
## but they are labelled differently. Ex. WGS, WGS. So I'm changing those to say it only once.
## Remember to change factors to characters or the conversion will get wonky.
kf1$Biospecimen.ID <- as.character(kf1$Biospecimen.ID)
kf$Participants.ID <- as.character(kf$Participants.ID)
kf$Study.ID <- as.character(kf$Study.ID)
kf$Experiment.Strategy <- as.character(kf$Experiment.Strategy)
kf$File.Name <- as.character(kf$File.Name)
kf$File.ID <- as.character(kf$File.ID)
kf$File.Format <- as.character(kf$File.Format)
kf$Data.Type <- as.character(kf$Data.Type)
kf$Study.Name <- as.character(kf$Study.Name)
kf <- kf %>%
mutate_all(~ifelse(.=="--", NA, .)) %>%
mutate(Study.ID = substr(Study.ID,1,11)) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WGS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", WXS")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", RNA-Seq")) %>%
mutate(Experiment.Strategy = str_remove_all(Experiment.Strategy, ", Not Reported"))
## It's a bit harder to get rid of the extra biospecimen ids in a single cell, so this is a really crappy way of doing it.
## some are repeats and some are not, but we're going to keep the first one for now. i.e Biospecimen.ID_1. See in Biospample section below.
kf <- cSplit(kf, "Biospecimen.ID", ",")
kf <- cSplit(kf, "Study.Name", ",")
kf <- cSplit(kf, "Participants.ID") ## This is column that needs to be "gathered" because we care about all the values in each cell
head(kf)
## Gathering all the participant ids to make a long format.
## I'm not sure why some have 5 participant IDs! But let's not worry about that right now.
kf2 <- kf %>%
gather("ColID", "Participants.ID", c("Participants.ID_1","Participants.ID_2","Participants.ID_3",
"Participants.ID_4","Participants.ID_5"),
-(File.ID:Study.Name_5)) %>%
select(-ColID) ## take out this line if you want to see where the id came from.
##make subject_role_taxonomy.tsv
#subject_id_namespace    subject_id                         role_id                taxonomy_id
#cfde_id_namespace:3    [fill this with participant ID]    cfde_subject_role:3     NCBI:txid9606
uniq_participants <- unique(kf2$Participants.ID)
length(uniq_participants)
subroletax_df <- data.frame('subject_id_namespace'='cfde_id_namespace:3',
'subject_id'=uniq_participants,
'role_id'='cfde_subject_role:3',
'taxonomy_id'='NCBI:txid9606')
dim(subroletax_df)
head(subroletax_df)
write.table(subroletax_df, file='~/Desktop/subject_role_taxonomy.tsv', sep='\t', row.names=F, quote=F)
## change this part if you wish to select only first 100 for testing script
test_kf <- kf2 # kf[1:100,]
head(test_kf)
files_describes_biosample <- test_kf %>%
select(file_id_namespace, File.ID, biosample_id_namespace, Biospecimen.ID) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID) %>%
distinct()
colnames(kf)
#### files_describes_biosample ####
files_describes_biosample <- test_kf %>%
select(file_id_namespace, File.ID, biosample_id_namespace, Biospecimen.ID_1) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID) %>%
distinct()
#### files_describes_biosample ####
files_describes_biosample <- test_kf %>%
select(file_id_namespace, File.ID, biosample_id_namespace, Biospecimen.ID_1) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
head(files_describes_biosample)
nrow(files_describes_biosample)
unique(files_describes_biosample$file_local_id)
nrow(files_describes_biosample)
nrow(unique(files_describes_biosample$file_local_id))
length(unique(files_describes_biosample$file_local_id))
length(unique(files_describes_biosample$biosample_local_id))
head(files_describes_biosample)
## Check to make sure file format and data type make sense
unique(files_describes_biosample$file_local_id) == nrow(files_describes_biosample)
## Check to make sure file format and data type make sense
length(unique(files_describes_biosample$file_local_id)) == nrow(files_describes_biosample)
nrow(files_describes_biosample)
files_describes_biosample <- files_describes_biosample %>%
drop_na(file_local_id) %>%
drop_na(biosample_local_id)
nrow(files_describes_biosample)
colnames(test_kf)
#### files_describes_biosample ####
files_describes_biosample <- test_kf %>%
select(id_namespace, File.ID, id_namespace, Biospecimen.ID_1) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(files_describes_biosample$file_local_id)) == nrow(files_describes_biosample)
files_describes_biosample <- files_describes_biosample %>%
drop_na(file_local_id) %>%
drop_na(biosample_local_id)
head(files_describes_biosample)
#### files_describes_biosample ####
test_kf$file_id_namespace <- test_kf$id_namespace
#### files_describes_biosample ####
test_kf$file_id_namespace <- test_kf$id_namespace
test_kf$biosample_id_namespace <- test_kf$id_namespace
files_describes_biosample <- test_kf %>%
select(id_namespace, File.ID, id_namespace, Biospecimen.ID_1) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(files_describes_biosample$file_local_id)) == nrow(files_describes_biosample)
files_describes_biosample <- files_describes_biosample %>%
drop_na(file_local_id) %>%
drop_na(biosample_local_id)
head(files_describes_biosample)
files_describes_biosample <- test_kf %>%
select(file_id_namespace, File.ID, biosample_id_namespace, Biospecimen.ID_1) %>%
rename (file_local_id = File.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(files_describes_biosample$file_local_id)) == nrow(files_describes_biosample)
files_describes_biosample <- files_describes_biosample %>%
drop_na(file_local_id) %>%
drop_na(biosample_local_id)
head(files_describes_biosample)
files_describes_biosample <- as.data.frame(unclass(files_describes_biosample))
write.table(files_describes_biosample, file = "~/Desktop/files_describes_biosample.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
test_kf$subject_id_namespace <- test_kf$id_namespace
biosample_from_subject <- test_kf %>%
select(biosample_id_namespace, Biospecimen.ID_1, subject_id_namespace, Participants.ID) %>%
rename (subject_local_id = Participants.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
head(biosample_from_subject)
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$file_local_id)) == nrow(biosample_from_subject)
nrow(biosample_from_subject)
length(unique(biosample_from_subject$file_local_id))
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$subject_local_id)) == nrow(biosample_from_subject)
length(unique(biosample_from_subject$subject_local_id))
length(unique(biosample_from_subject$biosample_local_id))
nrow(biosample_from_subject)
biosample_from_subject <- biosample_from_subject %>%
drop_na(file_local_id) %>%
drop_na(biosample_local_id)
biosample_from_subject <- biosample_from_subject %>%
drop_na(subject_local_id) %>%
drop_na(biosample_local_id)
length(unique(biosample_from_subject$biosample_local_id))
nrow(biosample_from_subject)
test_kf$subject_id_namespace <- test_kf$id_namespace
biosample_from_subject <- test_kf %>%
select(biosample_id_namespace, Biospecimen.ID_1, subject_id_namespace, Participants.ID) %>%
rename (subject_local_id = Participants.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
biosample_from_subject <- biosample_from_subject %>%
drop_na(subject_local_id) %>%
drop_na(biosample_local_id)
biosample_from_subject <- as.data.frame(unclass(biosample_from_subject))
write.table(biosample_from_subject, file = "~/Desktop/biosample_from_subject.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
test_kf$subject_id_namespace <- test_kf$id_namespace
biosample_from_subject <- test_kf %>%
select(biosample_id_namespace, Biospecimen.ID_1, subject_id_namespace, Participants.ID) %>%
rename (subject_local_id = Participants.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
length(unique(biosample_from_subject$biosample_local_id))
nrow(biosample_from_subject)
test_kf$subject_id_namespace <- test_kf$id_namespace
biosample_from_subject <- test_kf %>%
select(biosample_id_namespace, Biospecimen.ID_1, subject_id_namespace, Participants.ID) %>%
rename (subject_local_id = Participants.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
biosample_from_subject <- biosample_from_subject %>%
drop_na(subject_local_id) %>%
drop_na(biosample_local_id)
length(unique(biosample_from_subject$biosample_local_id))
nrow(biosample_from_subject)
22445-17088
biosample_from_subject1 <- biosample_from_subject[!duplicated(biosample_from_subject$subject_local_id),]
dim(biosample_from_subject1) #17088
length(unique(biosample_from_subject1$subject_local_id)) #17088
biosample_from_subject1[biosample_from_subject1$subject_local_id == 'BS_JR1T2QVX',] #only 1 entry now
biosample_from_subject1 <- biosample_from_subject[!duplicated(biosample_from_subject$biosample_local_id),]
dim(biosample_from_subject1) #12276
length(unique(biosample_from_subject1$biosample_local_id)) #12276
biosample_from_subject1[biosample_from_subject1$biosample_local_id == 'BS_JR1T2QVX',] #only 1 entry now
test_kf$subject_id_namespace <- test_kf$id_namespace
biosample_from_subject <- test_kf %>%
select(biosample_id_namespace, Biospecimen.ID_1, subject_id_namespace, Participants.ID) %>%
rename (subject_local_id = Participants.ID,
biosample_local_id = Biospecimen.ID_1) %>%
distinct()
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
biosample_from_subject <- biosample_from_subject %>%
drop_na(subject_local_id) %>%
drop_na(biosample_local_id)
biosample_from_subject <- biosample_from_subject[!duplicated(biosample_from_subject$biosample_local_id),]
dim(biosample_from_subject) #17088
length(unique(biosample_from_subject$biosample_local_id)) #17088
biosample_from_subject[biosample_from_subject$biosample_local_id == 'BS_JR1T2QVX',] #only 1 entry now
biosample_from_subject <- as.data.frame(unclass(biosample_from_subject))
## Check to make sure file format and data type make sense
length(unique(biosample_from_subject$biosample_local_id)) == nrow(biosample_from_subject)
write.table(biosample_from_subject, file = "~/Desktop/biosample_from_subject.tsv", row.names=FALSE, sep="\t", na="", quote = FALSE)
